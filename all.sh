#!/bin/bash
set -e # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
check_command() {
  if [ $? -ne 0 ]; then
    echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: $1"
    exit 1
  else
    echo "‚úÖ –£—Å–ø–µ—à–Ω–æ: $1"
  fi
}

# 1. –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
echo "üöÄ –≠—Ç–∞–ø 1: –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ Yandex Cloud"
cd 02-infra
./init_backend.sh
terraform apply -auto-approve
check_command "terraform apply"

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JSON —Å output
echo "üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è outputs.json"
terraform output -json > ../infra-outputs.json
check_command "–°–æ–∑–¥–∞–Ω–∏–µ infra-outputs.json"

# –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å–∞
CONTROL_IP=$(jq -r '.control_plane_ip.value' ../infra-outputs.json)
WORKER_IPS=$(jq -r '.worker_ips.value[]' ../infra-outputs.json)

# # 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DNS (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω YC CLI)
# echo "üåê –≠—Ç–∞–ø 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DNS (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω YC CLI)"
# if command -v yc &> /dev/null; then
#   echo "–û–±–Ω–æ–≤–ª—è–µ–º DNS –∑–∞–ø–∏—Å—å –¥–ª—è netology2.sushkovs.ru..."
#   yc dns zone add-records --name sushkovs.ru --record "netology2 60 A $CONTROL_IP"
#   for ip in $WORKER_IPS; do
#     yc dns zone add-records --name sushkovs.ru --record "netology2 60 A $ip"
#   done
#   echo "DNS –∑–∞–ø–∏—Å–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –û–∂–∏–¥–∞–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ DNS (1-2 –º–∏–Ω—É—Ç—ã)..."
#   sleep 120
# else
#   echo "‚ö†Ô∏è YC CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤–∏—Ç—å DNS –∑–∞–ø–∏—Å–∏:"
#   echo "–î–æ–º–µ–Ω: netology2.sushkovs.ru"
#   echo "IP –∞–¥—Ä–µ—Å–∞:"
#   echo "- $CONTROL_IP (control plane)"
#   for ip in $WORKER_IPS; do
#     echo "- $ip (worker)"
#   done
# fi

# 3. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Kubernetes
echo "‚öôÔ∏è –≠—Ç–∞–ø 3: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Kubernetes –∫–ª–∞—Å—Ç–µ—Ä–∞"
cd ../04-k8s
./deploy_k8s.sh
check_command "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Kubernetes"

# –ñ–¥–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API —Å–µ—Ä–≤–µ—Ä–∞
echo "‚è≥ –û–∂–∏–¥–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Kubernetes API..."
API_READY=0
for i in {1..30}; do
  if kubectl get nodes &> /dev/null; then
    API_READY=1
    break
  fi
  sleep 10
  echo "–ü–æ–ø—ã—Ç–∫–∞ $i/30: API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω..."
done

if [ $API_READY -eq 0 ]; then
  echo "‚ùå Kubernetes API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ 5 –º–∏–Ω—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è"
  exit 1
fi

# 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MetalLB
echo "üîå –≠—Ç–∞–ø 4: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MetalLB"
cd ../05-k8s-manifests

echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ strictARP..."
kubectl get configmap kube-proxy -n kube-system -o yaml | \
sed -e "s/strictARP: false/strictARP: true/" | \
kubectl apply -f - -n kube-system
check_command "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ strictARP"

echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ MetalLB..."
kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.14.9/config/manifests/metallb-native.yaml
check_command "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ MetalLB"

# –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ MetalLB
echo "‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫–∞ MetalLB..."
# kubectl wait --for=condition=ready pod -l app=metallb -n metallb-system --timeout=180s
kubectl wait --for=condition=ready pod --all -n metallb-system --timeout=180s
check_command "MetalLB –≥–æ—Ç–æ–≤"

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MetalLB
echo "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MetalLB..."
./generate-metallb-config.sh
check_command "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è metallb-config.yaml"

echo "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MetalLB..."
kubectl apply -f metallb/metallb-config.yaml
check_command "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ MetalLB –∫–æ–Ω—Ñ–∏–≥–∞"

# 5. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Ingress
echo "üåê –≠—Ç–∞–ø 5: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Ingress"
kubectl apply -f ingress/ingress-nginx-networkpolicy.yaml
check_command "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ NetworkPolicy –¥–ª—è ingress-nginx"

# 6. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ registry secret
echo "üîë –≠—Ç–∞–ø 6: –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–∞ –¥–ª—è Docker registry"
kubectl create secret docker-registry yandex-registry-secret \
  --docker-server=cr.yandex \
  --docker-username=json_key \
  --docker-password="$(cat ../03-registry/registry_sa_key.json)" \
  -n default
check_command "–°–æ–∑–¥–∞–Ω–∏–µ registry secret"

# 7. –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
echo "üöÄ –≠—Ç–∞–ø 7: –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
kubectl apply -f app/deployment.yaml
kubectl apply -f app/service.yaml
kubectl apply -f app/ingress.yaml
check_command "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"

# 8. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
echo "üìä –≠—Ç–∞–ø 8: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
kubectl apply --server-side -f monitoring/manifests/setup
check_command "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ kube-prometheus (setup)"

echo "–û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ CRDs..."
kubectl wait --for condition=Established --all CustomResourceDefinition --namespace=monitoring --timeout=180s
check_command "CRDs –≥–æ—Ç–æ–≤—ã"

kubectl apply -f monitoring/manifests/
check_command "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ kube-prometheus"

# 9. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Grafana
echo "üìà –≠—Ç–∞–ø 9: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Grafana"
kubectl patch deployment -n monitoring grafana --patch-file monitoring/grafana-deployment-patch.yaml
check_command "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Grafana —á–µ—Ä–µ–∑ patch"

kubectl apply -f monitoring/grafana-ingress.yaml
check_command "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Ingress –¥–ª—è Grafana"

kubectl apply -f monitoring/grafana-networkpolicy.yaml
check_command "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ NetworkPolicy –¥–ª—è Grafana"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π..."
echo "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ: http://netology2.sushkovs.ru"
echo "Grafana –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ: http://netology2.sushkovs.ru/grafana"

# –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
cd ..

echo "üéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã!"
